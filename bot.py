import asyncio
import os
from datetime import datetime
from fastapi import FastAPI
from fastapi.responses import FileResponse
import uvicorn

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üëâ –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
ADMIN_ID = 708095106

# ---------- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------
class BookingForm(StatesGroup):
    name = State()
    school_class = State()
    subject = State()
    contact = State()

# ---------- /start ----------
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")],
            [KeyboardButton(text="‚ÑπÔ∏è –û —à–∫–æ–ª–µ"), KeyboardButton(text="üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# ---------- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ----------
@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
async def handle_diagnostic(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–Ω–∞–Ω–∏–π. "
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="diagnostic_accept")],
            [InlineKeyboardButton(text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="diagnostic_personal")]
        ]
    )

    await message.answer(text, reply_markup=kb)

# ---------- –ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ----------
@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")
async def handle_course(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã:\n\n"
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="course_accept")],
            [InlineKeyboardButton(text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="course_personal")],
            [InlineKeyboardButton(text="üìÑ –ü–æ–ª–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ (PDF)", url="https://telegram-bot-production-4201.up.railway.app/offer")]
        ]
    )

    await message.answer(text, reply_markup=kb)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ----------
async def start_form(callback: types.CallbackQuery, state: FSMContext, booking_type: str):
    user_id = callback.from_user.id
    username = callback.from_user.username
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("offers_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{now} | {booking_type} | {user_id} | @{username}\n")

    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏ ({booking_type}).\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await state.update_data(booking_type=booking_type)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    await state.set_state(BookingForm.name)

# ---------- Callbacks ----------
@dp.callback_query(F.data == "diagnostic_accept")
async def diagnostic_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

@dp.callback_query(F.data == "course_accept")
async def course_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")

@dp.callback_query(F.data.contains("personal"))
async def personal_data(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚úÖ")
    await callback.answer()

# ---------- –§–æ—Ä–º–∞ ----------
@dp.message(BookingForm.name)
async def form_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
    await state.set_state(BookingForm.school_class)

@dp.message(BookingForm.school_class)
async def form_class(message: types.Message, state: FSMContext):
    await state.update_data(school_class=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞):")
    await state.set_state(BookingForm.subject)

@dp.message(BookingForm.subject)
async def form_subject(message: types.Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):")
    await state.set_state(BookingForm.contact)

@dp.message(BookingForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("bookings.txt", "a", encoding="utf-8") as f:
        f.write(
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | {data['booking_type']} | "
            f"{data['name']} | {data['school_class']} | {data['subject']} | {data['contact']} | TelegramID: {message.from_user.id}\n"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({data['booking_type']}):\n\n"
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üè´ –ö–ª–∞—Å—Å: {data['school_class']}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
        f"‚òé –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"üÜî TelegramID: {message.from_user.id}"
    )

    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É —à–∫–æ–ª—É!"
    )
    await state.clear()

# ===== –°–ï–†–í–ï–† =====
app = FastAPI()

@app.get("/")
def home():
    return {"status": "ok", "message": "Bot + Server running"}

@app.get("/offer")
def get_offer():
    return FileResponse("static/offer.pdf", media_type="application/pdf")

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def start_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
