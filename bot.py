import asyncio
import os
from datetime import datetime
from fastapi import FastAPI
from fastapi.responses import FileResponse
import uvicorn
from aiogram.types import LabeledPrice


from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –¢–æ–∫–µ–Ω –Ω–∞ –æ–ø–ª–∞—Ç—É
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üëâ –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
ADMIN_ID = 708095106

# ---------- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------
class BookingForm(StatesGroup):
    name = State()
    school_class = State()
    subject = State()
    contact = State()

# ---------- /start ----------
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã")], 
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="üìö –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")],
            [KeyboardButton(text="üë®‚Äçüè´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")],
            [KeyboardButton(text="‚ÑπÔ∏è –û —à–∫–æ–ª–µ"), KeyboardButton(text="üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# ---------- –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã ----------
@dp.message(F.text == "üìä –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã")
async def handle_prices(message: types.Message):
    text = (
        "üìä <b>–¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã</b>\n\n"
        "1Ô∏è‚É£ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: 90 –º–∏–Ω—É—Ç, –æ–Ω–ª–∞–π–Ω\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 2500 ‚ÇΩ\n"
        "2Ô∏è‚É£ <b>–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å (–≥—Ä—É–ø–ø–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: 3 –∑–∞–Ω—è—Ç–∏—è/–Ω–µ–¥.(–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞), 90 –º–∏–Ω—É—Ç, –æ–Ω–ª–∞–π–Ω\n"
        "‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç: –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º, –ø—Ä–æ–±–Ω–∏–∫–∞–º\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        "   ‚Ä¢ 10 000 ‚ÇΩ / –º–µ—Å—è—Ü\n"
        "   ‚Ä¢ 75 000 ‚ÇΩ / –∑–∞ –≥–æ–¥ (—ç–∫–æ–Ω–æ–º–∏—è 15 000 ‚ÇΩ)"
    )
    await message.answer(text, parse_mode="HTML")

# ---------- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ----------
@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
async def handle_diagnostic(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–Ω–∞–Ω–∏–π. "
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="diagnostic_accept")],
            [InlineKeyboardButton(
                text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/consent")]
        ]
    )

    await message.answer(text, reply_markup=kb)

# ---------- –ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ----------
@dp.message(F.text == "üìö –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")
async def handle_course(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã:\n\n"
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="course_accept")],
            [InlineKeyboardButton(
                text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/consent")],
            [InlineKeyboardButton(
                text="üìù –ü–æ–ª–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/offer")]
        ]
    )

    await message.answer(text, reply_markup=kb)

# ---------- –û —à–∫–æ–ª–µ ----------
@dp.message(F.text == "‚ÑπÔ∏è –û —à–∫–æ–ª–µ")
async def handle_about(message: types.Message):
    text = (
        "üìå <b>–û —à–∫–æ–ª–µ ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É <b>¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª</b> ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞ "
        "—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ–Ω—è—Ç–Ω—ã–º–∏, –∞ —ç–∫–∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –±—ã—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º.\n\n"
        "üéì <b>–î–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 8‚Äì11 –∫–ª–∞—Å—Å–æ–≤:</b>\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω—è–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤–∏–º –∫ –û–ì–≠ –∏ –ï–ì–≠ –±–µ–∑ –∑–∞—É—á–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –î–∞—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –ø—Ä–æ–±–µ–ª—ã –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
        "üë®‚Äçüë©‚Äçüëß <b>–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n"
        "‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã\n"
        "‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ —Ä–µ–±—ë–Ω–æ–∫ –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É, –∞ –Ω–µ —Ö–∞–æ—Ç–∏—á–Ω–æ\n\n"
        "üí° <b>–ü–æ—á–µ–º—É –º—ã?</b>\n"
        "‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ ¬´–≥–æ–≤–æ—Ä—è—Ç –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ¬ª —Å —É—á–µ–Ω–∏–∫–∞–º–∏\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ‚Üí –æ—Ç –±–∞–∑—ã –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏\n"
        "‚Ä¢ –ú–∏–Ω–∏-–≥—Ä—É–ø–ø—ã ‚Üí –∫–∞–∂–¥–æ–º—É —É–¥–µ–ª—è–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è\n\n"
        "üìà –ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–≥–∞–ª–æ—á–∫–∞¬ª.\n\n"
        "–§–∏–∑–ú–∞—Ç–∏—É–º ‚Äî —Ä–∞–∑–≤–∏–≤–∞–µ–º —É–º, —É–º–Ω–æ–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üöÄ"
    )
    await message.answer(text, parse_mode="HTML")


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ----------
async def start_form(callback: types.CallbackQuery, state: FSMContext, booking_type: str):
    user_id = callback.from_user.id
    username = callback.from_user.username
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("offers_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{now} | {booking_type} | {user_id} | @{username}\n")

    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏ ({booking_type}).\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await state.update_data(booking_type=booking_type)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    await state.set_state(BookingForm.name)

# ---------- Callbacks ----------
@dp.callback_query(F.data == "diagnostic_accept")
async def diagnostic_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

@dp.callback_query(F.data == "course_accept")
async def course_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")

@dp.callback_query(F.data.contains("personal"))
async def personal_data(callback: types.CallbackQuery):
    await callback.answer()

# ---------- –§–æ—Ä–º–∞ ----------
@dp.message(BookingForm.name)
async def form_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
    await state.set_state(BookingForm.school_class)

@dp.message(BookingForm.school_class)
async def form_class(message: types.Message, state: FSMContext):
    await state.update_data(school_class=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞):")
    await state.set_state(BookingForm.subject)

@dp.message(BookingForm.subject)
async def form_subject(message: types.Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):")
    await state.set_state(BookingForm.contact)

@dp.message(BookingForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("bookings.txt", "a", encoding="utf-8") as f:
        f.write(
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | {data['booking_type']} | "
            f"{data['name']} | {data['school_class']} | {data['subject']} | {data['contact']} | TelegramID: {message.from_user.id}\n"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({data['booking_type']}):\n\n"
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üè´ –ö–ª–∞—Å—Å: {data['school_class']}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
        f"‚òé –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"üÜî TelegramID: {message.from_user.id}"
    )

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü ‚Äî 10 000 ‚ÇΩ", callback_data="pay_month")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≥–æ–¥ ‚Äî 75 000 ‚ÇΩ", callback_data="pay_year")]
        ]
    )

    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb
    )
    
    await state.clear()

@dp.callback_query(F.data == "pay_month")
async def pay_month(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –æ–±—É—á–µ–Ω–∏—è", amount=200 * 100)]  # *100 = –∫–æ–ø–µ–π–∫–∏
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ú–µ—Å—è—á–Ω—ã–π –∫—É—Ä—Å ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª",
        description="–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º –ø–æ —Ñ–∏–∑–∏–∫–µ –∏–∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ (1 –º–µ—Å—è—Ü).",
        payload="month_course_payment",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="month_course",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()


@dp.callback_query(F.data == "pay_year")
async def pay_year(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ –≥–æ–¥–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞", amount=200 * 100)]
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª",
        description="–ì—Ä—É–ø–ø–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: 3 –∑–∞–Ω—è—Ç–∏—è –≤ –Ω–µ–¥–µ–ª—é (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏–ª–∏ —Ñ–∏–∑–∏–∫–∞).",
        payload="year_course_payment",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="year_course",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()

@dp.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    payment = message.successful_payment

    # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ç–µ—Å—Ç–∞)
    print("=== –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê ===")
    print("–°—É–º–º–∞:", payment.total_amount / 100, payment.currency)
    print("–ü–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", payment.to_python())

    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üíô\n"
        "–ú—ã —É–∂–µ –≤–∏–¥–∏–º –≤–∞—à –ø–ª–∞—Ç—ë–∂, –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


# ===== –°–ï–†–í–ï–† =====
app = FastAPI()

@app.get("/")
def home():
    return {"status": "ok", "message": "Bot + Server running"}

@app.get("/offer")
def get_offer():
    return FileResponse("static/offer.pdf", media_type="application/pdf")

@app.get("/consent")
def get_consent():
    return FileResponse("static/consent.pdf", media_type="application/pdf")

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def start_bot():
    await dp.start_polling(bot)

async def start_server():
    config = uvicorn.Config(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    await asyncio.gather(
        start_bot(),
        start_server()
    )

if __name__ == "__main__":
    asyncio.run(main())
