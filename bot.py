import asyncio
import os
from datetime import datetime
from fastapi import FastAPI
from fastapi.responses import FileResponse
import uvicorn
from aiogram.types import LabeledPrice
from aiogram.types import PreCheckoutQuery


from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –¢–æ–∫–µ–Ω –Ω–∞ –æ–ø–ª–∞—Ç—É
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üëâ –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
ADMIN_ID = 708095106
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –¥–æ –æ–ø–ª–∞—Ç—ã
pending_forms = {}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery
@dp.pre_checkout_query()
async def process_pre_checkout(query: PreCheckoutQuery):
    """
    Telegram –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ PreCheckoutQuery –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.
    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞.
    """
    await bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

# ---------- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------
class BookingForm(StatesGroup):
    name = State()
    school_class = State()
    subject = State()
    contact = State()

# ---------- /start ----------
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã")], 
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="üìö –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å"), KeyboardButton(text="üë®‚Äçüè´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")],
            [KeyboardButton(text="‚ÑπÔ∏è –û —à–∫–æ–ª–µ"), KeyboardButton(text="üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# ---------- –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã ----------
@dp.message(F.text == "üìä –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã")
async def handle_prices(message: types.Message):
    text = (
        "üìä <b>–¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã</b>\n\n"
        "1Ô∏è‚É£ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: 90 –º–∏–Ω—É—Ç, –æ–Ω–ª–∞–π–Ω\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 2000 ‚ÇΩ\n"
        "2Ô∏è‚É£ <b>–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: 3 –∑–∞–Ω—è—Ç–∏—è –≤ –Ω–µ–¥–µ–ª—é, 90 –º–∏–Ω—É—Ç –æ–Ω–ª–∞–π–Ω, –¥–æ–º–∞—à–∫–∞ —Å \n"
        " –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –ø—Ä–æ–±–Ω–∏–∫–∞–º. \n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        "   ‚Ä¢ 10 000 ‚ÇΩ / –º–µ—Å—è—Ü\n"
        "   ‚Ä¢ 18 000 ‚ÇΩ / –º–µ—Å—è—Ü - –∫–æ–º–±–æ"
    )
    await message.answer(text, parse_mode="HTML")

# ---------- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ----------
@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
async def handle_diagnostic(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–Ω–∞–Ω–∏–π. "
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="diagnostic_accept")],
            [InlineKeyboardButton(
                text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/consent")]
        ]
    )

    await message.answer(text, reply_markup=kb)

# ---------- –ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ----------
@dp.message(F.text == "üìö –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")
async def handle_course(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã:\n\n"
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="course_accept")],
            [InlineKeyboardButton(
                text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/consent")],
            [InlineKeyboardButton(
                text="üìù –ü–æ–ª–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/offer")]
        ]
    )

    await message.answer(text, reply_markup=kb)

# ---------- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ ----------
@dp.message(F.text == "üë®‚Äçüè´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
async def handle_individual(message: types.Message):
    text = (
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã:\n\n"
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="individual_accept")],
            [InlineKeyboardButton(
                text="üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/consent")],
            [InlineKeyboardButton(
                text="üìù –ü–æ–ª–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ (PDF)",
                url="https://telegram-bot-production-534b.up.railway.app/offer")]
        ]
    )

    await message.answer(text, reply_markup=kb)


# ---------- –û —à–∫–æ–ª–µ ----------
@dp.message(F.text == "‚ÑπÔ∏è –û —à–∫–æ–ª–µ")
async def handle_about(message: types.Message):
    text = (
        "üìå <b>–û —à–∫–æ–ª–µ ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É <b>¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª</b> ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞ "
        "—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ–Ω—è—Ç–Ω—ã–º–∏, –∞ —ç–∫–∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –±—ã—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º.\n\n"
        "üéì <b>–î–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 8‚Äì11 –∫–ª–∞—Å—Å–æ–≤:</b>\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω—è–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤–∏–º –∫ –û–ì–≠ –∏ –ï–ì–≠ –±–µ–∑ –∑–∞—É—á–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –î–∞—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –ø—Ä–æ–±–µ–ª—ã –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
        "üë®‚Äçüë©‚Äçüëß <b>–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n"
        "‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã\n"
        "‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ —Ä–µ–±—ë–Ω–æ–∫ –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É, –∞ –Ω–µ —Ö–∞–æ—Ç–∏—á–Ω–æ\n\n"
        "üí° <b>–ü–æ—á–µ–º—É –º—ã?</b>\n"
        "‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ ¬´–≥–æ–≤–æ—Ä—è—Ç –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ¬ª —Å —É—á–µ–Ω–∏–∫–∞–º–∏\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ‚Üí –æ—Ç –±–∞–∑—ã –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏\n"
        "‚Ä¢ –ú–∏–Ω–∏-–≥—Ä—É–ø–ø—ã ‚Üí –∫–∞–∂–¥–æ–º—É —É–¥–µ–ª—è–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è\n\n"
        "üìà –ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–≥–∞–ª–æ—á–∫–∞¬ª.\n\n"
        "–§–∏–∑–ú–∞—Ç–∏—É–º ‚Äî —Ä–∞–∑–≤–∏–≤–∞–µ–º —É–º, —É–º–Ω–æ–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üöÄ"
    )
    await message.answer(text, parse_mode="HTML")


    # ---------- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ----------
@dp.message(F.text == "üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def handle_materials(message: types.Message):
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üìò –§–∏–∑–∏–∫–∞ –ï–ì–≠",
                url="https://telegram-bot-production-534b.up.railway.app/physics_ege")],
            [InlineKeyboardButton(
                text="üìó –§–∏–∑–∏–∫–∞ –û–ì–≠",
                url="https://telegram-bot-production-534b.up.railway.app/physics_oge")],
            [InlineKeyboardButton(
                text="üìô –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è",
                url="https://telegram-bot-production-534b.up.railway.app/stereometry")],
            [InlineKeyboardButton(
                text="üìï –ì–µ–æ–º–µ—Ç—Ä–∏—è –û–ì–≠ + –ï–ì–≠",
                url="https://telegram-bot-production-534b.up.railway.app/geometry")]
        ]
    )
    await message.answer(text, reply_markup=kb)



# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ----------
async def start_form(callback: types.CallbackQuery, state: FSMContext, booking_type: str):
    user_id = callback.from_user.id
    username = callback.from_user.username
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("offers_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{now} | {booking_type} | {user_id} | @{username}\n")

    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏ ({booking_type}).\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await state.update_data(booking_type=booking_type)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    await state.set_state(BookingForm.name)

# ---------- Callbacks ----------
@dp.callback_query(F.data == "diagnostic_accept")
async def diagnostic_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

@dp.callback_query(F.data == "course_accept")
async def course_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å")

@dp.callback_query(F.data == "individual_accept")
async def individual_accept(callback: types.CallbackQuery, state: FSMContext):
    await start_form(callback, state, "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")

@dp.callback_query(F.data.contains("personal"))
async def personal_data(callback: types.CallbackQuery):
    await callback.answer()

# ---------- –§–æ—Ä–º–∞ ----------
@dp.message(BookingForm.name)
async def form_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
    await state.set_state(BookingForm.school_class)

@dp.message(BookingForm.school_class)
async def form_class(message: types.Message, state: FSMContext):
    await state.update_data(school_class=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞):")
    await state.set_state(BookingForm.subject)

@dp.message(BookingForm.subject)
async def form_subject(message: types.Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):")
    await state.set_state(BookingForm.contact)

@dp.message(BookingForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    booking_type = data["booking_type"]

    # === –ì–û–î–û–í–û–ô –ö–£–†–° ===
    if booking_type == "–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å":
        pending_forms[message.from_user.id] = data

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü ‚Äî 10 000 ‚ÇΩ", callback_data="pay_month")],
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–±–æ ‚Äî 18 000 ‚ÇΩ", callback_data="pay_combo")],
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≥–æ–¥ ‚Äî 75 000 ‚ÇΩ", callback_data="pay_year")]
            ]
        )
        await message.answer(
            "‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb
        )

    # === –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ï –ó–ê–ù–Ø–¢–ò–ï ===
    elif booking_type == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ":
        pending_forms[message.from_user.id] = data

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ ‚Äî 2 000 ‚ÇΩ", callback_data="pay_individual")]
            ]
        )
        await message.answer(
            "‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:",
            reply_markup=kb
        )

    # === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è) ===
    else:
        with open("bookings.txt", "a", encoding="utf-8") as f:
            f.write(
                f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | {booking_type} | "
                f"{data['name']} | {data['school_class']} | {data['subject']} | "
                f"{data['contact']} | TelegramID: {message.from_user.id}\n"
            )

        await bot.send_message(
            ADMIN_ID,
            f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({booking_type}):\n\n"
            f"üë§ –§–ò–û: {data['name']}\n"
            f"üè´ –ö–ª–∞—Å—Å: {data['school_class']}\n"
            f"üìò –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
            f"‚òé –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
            f"üÜî TelegramID: {message.from_user.id}"
        )

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è üí¨")

    await state.clear()



@dp.callback_query(F.data == "pay_month")
async def pay_month(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –æ–±—É—á–µ–Ω–∏—è", amount=10000 * 100)]  # *100 = –∫–æ–ø–µ–π–∫–∏
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ú–µ—Å—è—á–Ω—ã–π –∫—É—Ä—Å ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª",
        description="–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ñ–∏–∑–∏–∫–µ (1 –º–µ—Å—è—Ü, 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é).",
        payload="month_course_payment",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="month_course",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()

@dp.callback_query(F.data == "pay_combo")
async def pay_combo(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ –∫–æ–º–±–æ-–∫—É—Ä—Å–∞", amount=18000 * 100)]  # *100 = –∫–æ–ø–µ–π–∫–∏
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ö–æ–º–±–æ-–∫—É—Ä—Å ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª",
        description="–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ñ–∏–∑–∏–∫–µ  (1 –º–µ—Å—è—Ü, 6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é).",
        payload="combo_course_payment",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="combo_course",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()



@dp.callback_query(F.data == "pay_year")
async def pay_year(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ –≥–æ–¥–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞", amount=75000 * 100)]
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ì–æ–¥–æ–≤–æ–π –∫—É—Ä—Å ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª",
        description="–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ñ–∏–∑–∏–∫–µ  (1 –≥–æ–¥, 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é).",
        payload="year_course_payment",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="year_course",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()

@dp.callback_query(F.data == "pay_individual")
async def pay_individual(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ", amount=2000 * 100)]  # *100 = –∫–æ–ø–µ–π–∫–∏
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ ¬´–§–∏–∑–ú–∞—Ç–∏—É–º¬ª",
        description="90-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.",
        payload="individual_lesson_payment",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="individual_lesson",
        need_email=True,
        send_email_to_provider=True,
    )
    await callback.answer()



@dp.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    payment = message.successful_payment
    user_id = message.from_user.id

    print("=== –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê ===")
    print("–°—É–º–º–∞:", payment.total_amount / 100, payment.currency)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞, –æ–∂–∏–¥–∞—é—â–∞—è –æ–ø–ª–∞—Ç—É
    data = pending_forms.pop(user_id, None)

    if data:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await bot.send_message(
            ADMIN_ID,
            f"üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ({payment.invoice_payload})!\n\n"
            f"üë§ –§–ò–û: {data['name']}\n"
            f"üè´ –ö–ª–∞—Å—Å: {data['school_class']}\n"
            f"üìò –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
            f"‚òé –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
            f"üÜî TelegramID: {user_id}\n\n"
            f"üí≥ –°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ bookings.txt
        with open("bookings.txt", "a", encoding="utf-8") as f:
            f.write(
                f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | {data['booking_type']} | "
                f"{data['name']} | {data['school_class']} | {data['subject']} | "
                f"{data['contact']} | TelegramID: {user_id} | "
                f"–û–ø–ª–∞—á–µ–Ω–æ: {payment.total_amount / 100} {payment.currency}\n"
            )

    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üíô\n"
        "–ú—ã —É–∂–µ –≤–∏–¥–∏–º –≤–∞—à –ø–ª–∞—Ç—ë–∂ –∏ —Å–∫–æ—Ä–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø."
    )



# ===== –°–ï–†–í–ï–† =====
app = FastAPI()

@app.get("/")
def home():
    return {"status": "ok", "message": "Bot + Server running"}

@app.get("/offer")
def get_offer():
    return FileResponse("static/offer.pdf", media_type="application/pdf")

@app.get("/consent")
def get_consent():
    return FileResponse("static/consent.pdf", media_type="application/pdf")

@app.get("/physics_ege")
def get_physics_ege():
    return FileResponse("static/physics_ege.pdf", media_type="application/pdf")

@app.get("/physics_oge")
def get_physics_oge():
    return FileResponse("static/physics_oge.pdf", media_type="application/pdf")

@app.get("/stereometry")
def get_stereometry():
    return FileResponse("static/stereometry.pdf", media_type="application/pdf")

@app.get("/geometry")
def get_geometry():
    return FileResponse("static/geometry.pdf", media_type="application/pdf")

@app.get("/image_1")
def get_image_1():
    return FileResponse("static/1.jpg", media_type="image/jpeg")

@app.get("/image_2")
def get_image_2():
    return FileResponse("static/2.jpg", media_type="image/jpeg")

@app.get("/image_3")
def get_image_3():
    return FileResponse("static/3.jpg", media_type="image/jpeg")

@app.get("/image_4")
def get_image_4():
    return FileResponse("static/4.jpg", media_type="image/jpeg")

@app.get("/image_5")
def get_image_5():
    return FileResponse("static/5.jpg", media_type="image/jpeg")

@app.get("/image_6")
def get_image_6():
    return FileResponse("static/6.jpg", media_type="image/jpeg")

@app.get("/image_7")
def get_image_7():
    return FileResponse("static/7.jpg", media_type="image/jpeg")

@app.get("/image_8")
def get_image_8():
    return FileResponse("static/8.jpg", media_type="image/jpeg")

@app.get("/image_9")
def get_image_9():
    return FileResponse("static/9.jpg", media_type="image/jpeg")

@app.get("/image_10")
def get_image_10():
    return FileResponse("static/10.jpg", media_type="image/jpeg")



# ---------- –ó–∞–ø—É—Å–∫ ----------
async def start_bot():
    await dp.start_polling(bot)

async def start_server():
    config = uvicorn.Config(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    await asyncio.gather(
        start_bot(),
        start_server()
    )

if __name__ == "__main__":
    asyncio.run(main())
